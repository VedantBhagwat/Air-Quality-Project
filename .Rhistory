View(df_Rathmines)
cols <- c("NO2","NO","O3","PM2.5","PM10")
df_Rathmines <- data.frame(NO2$Rathmines,NO$Rathmines,O3$Rathmines,PM2_5$Rathmines,PM10$Rathmines,
row.names = cols)
colnames(df_Rathmines) <- cols
View(df_Rathmines)
df_Limerick.Peoples.Park <- data.frame(NO2$Limerick.Peoples.Park,NO$Limerick.Peoples.Park,O3$Limerick.Peoples.Park,PM2_5$Limerick.Peoples.Park,PM10$Limerick.Peoples.Park)
df_Rathmines <- data.frame(NO2$Rathmines,NO$Rathmines,O3$Rathmines,PM2_5$Rathmines,PM10$Rathmines)
df_Waterford <- data.frame(NO2$Waterford,NO$Waterford,O3$Waterford,PM2_5$Waterford,PM10$Waterford)
cols <- c("NO2","NO","O3","PM2.5","PM10")
colnames(df_Limerick.Peoples.Park) <- cols
colnames(df_Rathmines) <- cols
colnames(df_Waterford) <- cols
cor(df_Limerick.Peoples.Park,use="complete.obs")
cor(df_Rathmines,use="complete.obs")
cor(df_Waterford,use="complete.obs")
boxplot(NO2_clone$Ballyfermot)
View(NO2_clone)
NO2_clone <- NO2_clone[,-5]
View(NO2_clone)
# Boxplots
boxplot(NO2_clone[,c(-1)])
summary(NO2_clone)
# Min. 1st Qu.  Median    Mean    3rd Qu.    Max.    NA's
#  -0.800   1.300   2.400   3.746   4.500  96.400     180
summary(NO2_clone$Davitt.Road)
for(i in 2:ncol(X2019_Hourly_NO2_for_UCC)){
replace(i, which(i < 0), NA)
}
for(i in 2:ncol(NO2_clone)){
replace(i, which(i < 0), NA)
}
for(i in 2:ncol(NO2_clone)){
NO2_clone[,i] <- replace(i, which(i < 0), NA)
}
NO2_clone <- NO2
# Remove cobh column from data frame because of missing data
NO2_clone <- NO2_clone[,-5]
# Boxplots
boxplot(NO2_clone[,c(-1)])
# Replace negative values with NA
replace(NO2_clone$Castlebar, which(NO2_clone$Castlebar < 0), NA)
# Replace negative values with NA
NO2_clone$Castlebar <- replace(NO2_clone$Castlebar, which(NO2_clone$Castlebar < 0), NA)
summary(NO2_clone)
NO2_clone %>% mutate_each(funs(replace(., .<0, NA)))
NO2_clone %>% mutate_all(funs(replace(., .<0, NA)))
a <- NO2_clone %>% mutate_all(funs(replace(., .<0, NA)))
a
View(a)
summary(a)
NO2_clone %>% mutate_all(funs(replace(., .<0, NA)))
# Replace negative values with NA
# NO2_clone$Castlebar <- replace(NO2_clone$Castlebar, which(NO2_clone$Castlebar < 0), NA)
# NO2_clone %>% mutate(Cobh = replace(Cobh, which(Cobh< -21), NA))
NO2_clone <- NO2_clone %>% mutate_all(funs(replace(., .<0, NA)))
summary(NO2_clone)
# Plot the graphs again
NO2_clone[,-1] %>% gather() %>% head()
ggplot(gather(NO2_clone[,-1]), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
boxplot(NO2_clone[,c(-1)])
boxplot(NO2_clone[,c(-1)], main="f")
summary(NO2_clone)
for(i in 2:ncol(NO2_clone)){
NO2_clone[is.na(NO2_clone[,i]), i] <- format(round(median(NO2_clone[,i], na.rm = TRUE), 2), nsmall = 2)
NO2_clone[,i] <- as.double(NO2_clone[,i])
}
# Plot the graphs again
NO2_clone[,-1] %>% gather() %>% head()
ggplot(gather(NO2_clone[,-1]), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
ggtitle("Histogram of NO2 after data preprocessing")
boxplot(NO2_clone[,c(-1)], main="Boxplot of NO2 after data preprocessing")
NO2_clone[,c(-1)] %>% gather() %>% head()
ggplot(gather(NO2_clone[,c(-1)]), aes(value)) +
geom_boxplot(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
stat_boxplot(geom ='errorbar')
NO2_clone[,c(-1)] %>% gather() %>% head()
ggplot(gather(NO2_clone[,c(-1)]), aes(value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
ggtitle("Boxplot of NO2 after data preprocessing")
summary(NO2_clone)
View(df_Limerick.Peoples.Park)
write.csv(df_Limerick.Peoples.Park,"E:\\CIT\\Project\\AQ data\\Export\\df_Limerick.Peoples.Park.csv", row.names = FALSE)
write.csv(df_Limerick.Peoples.Park,"E:\\CIT\\Project\\AQ data\\Export\\df_Waterford", row.names = FALSE)
write.csv(df_Limerick.Peoples.Park,"E:\\CIT\\Project\\AQ data\\Export\\df_Limerick.Peoples.Park.csv", row.names = FALSE)
write.csv(df_Rathmines,"E:\\CIT\\Project\\AQ data\\Export\\df_Rathmines.csv", row.names = FALSE)
write.csv(df_Waterford,"E:\\CIT\\Project\\AQ data\\Export\\df_Waterford.csv", row.names = FALSE)
summary(df_Limerick.Peoples.Park)
summary(df_Rathmines)
summary(df_Waterford)
summary(df_Rathmines)
df_Rathmines
View(df_Rathmines)
is.na(df_Rathmines)
NO2_ts <- df_Rathmines[,"NO2"]
NO2_ts
autoplot(NO2_ts , main="Air Passengers")
library(astsa)
library(tseries) # for ADF test
library(forecast) # auto.arima
autoplot(NO2_ts , main="Air Passengers")
typeof(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
summary(NO2_ts)
ts(NO2_ts)
NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
library(tidyverse)
library(lubridate)
# install.packages("timetk")
library(timetk)
library(imputeTS)
library(ggplot2)
# Setup for the plotly charts (# FALSE returns ggplots)
interactive <- FALSE
NO2 %>%
plot_time_series(as.Date(Date), Rathmines,
.interactive = interactive,
.plotly_slider = TRUE)
acf2(NO2_ts)
acf2(NO2_ts)
acf2(NO2_ts)
summary(NO2_ts)
dA = decompose(NO2_ts, "additive")
autoplot(dA)
dA = decompose(NO2_ts, "additive")
dA = decompose(NO2_ts, "additive")
View(NO2_clone)
View(df_Rathmines)
NO2_ts <- NO2_clone$Rathmines
typeof(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
NO2_ts <- ts(NO2_ts)
# autoplot(NO2_ts , main="Air Passengers")
NO2 %>%
plot_time_series(as.Date(Date), Rathmines,
.interactive = interactive,
.plotly_slider = TRUE)
summary(NO2_ts)
acf2(NO2_ts)
dA = decompose(NO2_ts, "additive")
hourly_ts_NO2 <- zoo(
x         = NO2_clone$Rathmines,
order.by  = NO2_clone$Date,
frequency = 24
)
library(zoo)
hourly_ts_NO2 <- zoo(
x         = NO2_clone$Rathmines,
order.by  = NO2_clone$Date,
frequency = 24
)
typeof(hourly_ts_NO2)
NO2_ts <- zoo(
x         = NO2_clone$Rathmines,
order.by  = NO2_clone$Date,
frequency = 24
)
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
NO2 %>%
plot_time_series(as.Date(Date), Rathmines,
.interactive = interactive,
.plotly_slider = TRUE)
summary(NO2_ts)
NO2_ts
acf2(NO2_ts)
acf2(NO2_ts[2])
acf2(NO2_ts[,2])
dA = decompose(NO2_ts, "additive")
acf2(NO2_ts)
View(NO2_ts)
sum(is.na(NO2_ts))
acf2(NO2_ts)
dA = decompose(NO2_ts, "additive")
dA = decompose(NO2_ts, "additive")
length(NO2_ts)
summary(NO2_ts)
drop_na(NO2_ts)
library(tidyr)
drop_na(NO2_ts)
na.omit(NO2_ts)
summary(NO2_ts)
NO2_ts <- na.omit(NO2_ts)
summary(NO2_ts)
NO2_ts <- na.remove(NO2_ts)
NO2_ts <- na_remove(NO2_ts)
summary(NO2_ts)
NO2_ts <- na.remove.ts(NO2_ts)
sum(is.na(NO2_ts))
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
acf2(NO2_ts)
acf2(NO2_ts,na.rm = T)
NO2_ts <- na_remove(NO2_ts)
acf2(NO2_ts)
NO2_ts <- zoo(
x         = NO2_clone$Waterford,
order.by  = NO2_clone$Date,
frequency = 24
)
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
NO2 %>%
plot_time_series(as.Date(Date), Rathmines,
.interactive = interactive,
.plotly_slider = TRUE)
summary(NO2_ts)
acf2(NO2_ts)
summary(NO2_clone)
NO2_clone <- na_remove(NO2_clone)
NO2_clone <- na.omit(NO2_clone)
summary(NO2_clone)
which(is.na(NO2_clone$Date))
View(NO2_clone)
NO2_clone$Date[2138,]
summary(NO2_clone)
NO2_clone <- na.omit(NO2_clone)
which(is.na(NO2_clone$Date))
NO2_clone <- NO2_clone[-c(2138, 10874), ]
summary(NO2_clone)
NO2_ts <- zoo(
x         = NO2_clone$Waterford,
order.by  = NO2_clone$Date,
frequency = 24
)
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
NO2_ts <- zoo(
x         = NO2_clone$Rathmines,
order.by  = NO2_clone$Date,
frequency = 24
)
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
NO2 %>%
plot_time_series(as.Date(Date), Rathmines,
.interactive = interactive,
.plotly_slider = TRUE)
summary(NO2_ts)
NO2_ts <- na.omit(NO2_ts)
summary(NO2_ts)
acf2(NO2_ts)
acf2(NO2_ts)
library(tidyverse)
library(lubridate)
# install.packages("timetk")
library(timetk)
library(imputeTS)
library(ggplot2)
# Setup for the plotly charts (# FALSE returns ggplots)
interactive <- FALSE
library(zoo)
library(tidyr)
library(astsa)
library(tseries) # for ADF test
library(forecast) # auto.arima
summary(NO2_clone)
NO2_ts <- zoo(
x         = NO2_clone$Rathmines,
order.by  = NO2_clone$Date,
frequency = 24
)
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
NO2 %>%
plot_time_series(as.Date(Date), Rathmines,
.interactive = interactive,
.plotly_slider = TRUE)
summary(NO2_ts)
acf2(NO2_ts)
dA = decompose(NO2_ts, "additive")
NO2_ts
gc()
memory.limit()
NO2_clone <- NO2
summary(NO2_clone)
NO2_ts <- zoo(
x         = NO2_clone$Rathmines,
order.by  = NO2_clone$Date,
frequency = 24
)
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
NO2 %>%
plot_time_series(as.Date(Date), Rathmines,
.interactive = interactive,
.plotly_slider = TRUE)
summary(NO2_ts)
acf2(NO2_ts)
NO2_clone <- na.omit(NO2_clone)
which(is.na(NO2_clone$Date))
summary(NO2_clone)
summary(NO2_ts)
NO2_ts <- zoo(
x         = NO2_clone$Rathmines,
order.by  = NO2_clone$Date,
frequency = 24
)
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
NO2 %>%
plot_time_series(as.Date(Date), Rathmines,
.interactive = interactive,
.plotly_slider = TRUE)
summary(NO2_ts)
acf2(NO2_ts)
window()
dev.window()
windows()
acf2(NO2_ts)
NO2_clone <- NO2
# Replace negative values with NA
# NO2_clone$Castlebar <- replace(NO2_clone$Castlebar, which(NO2_clone$Castlebar < 0), NA)
# NO2_clone %>% mutate(Cobh = replace(Cobh, which(Cobh< -21), NA))
NO2_clone <- NO2_clone %>% mutate_all(funs(replace(., .<0, NA)))
summary(NO2_clone)
# Replace NA with median
for(i in 2:ncol(NO2_clone)){
NO2_clone[is.na(NO2_clone[,i]), i] <- format(round(median(NO2_clone[,i], na.rm = TRUE), 2), nsmall = 2)
NO2_clone[,i] <- as.double(NO2_clone[,i])
}
summary(NO2_clone)
summary(NO2_clone)
# NO2_clone <- na.omit(NO2_clone)
which(is.na(NO2_clone$Date))
NO2_clone <- NO2_clone[-c(2138, 10874), ]
summary(NO2_clone)
NO2_ts <- zoo(
x         = NO2_clone$Rathmines,
order.by  = NO2_clone$Date,
frequency = 24
)
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Air Passengers")
# NO2_ts <- ts(NO2_ts)
autoplot(NO2_ts , main="Hourly data of Rathmines")
NO2 %>%
plot_time_series(as.Date(Date), Rathmines,
.interactive = interactive,
.plotly_slider = TRUE)
summary(NO2_ts)
acf2(NO2_ts)
library(zoo)
library(astsa)
library(ggplot2)
library(forecast)
library(TSstudio)
library(timetk)
library(xts)
library(stats)
library(reshape2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)
summary(NO_clone)
NO_clone <- NO
str(NO_clone)
summary(NO_clone)
NO_clone[,-1] %>% gather() %>% head()
ggplot(gather(NO_clone[,-1]), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')+
ggtitle("Histogram of NO before data preprocessing")
# Remove cobh column from data frame because of missing data
NO_clone <- NO_clone[,-5]
NO_clone[,c(-1)] %>% gather() %>% head()
ggplot(gather(NO_clone[,c(-1)]), aes(value)) +
geom_boxplot(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
stat_boxplot(geom ='errorbar') +
ggtitle("Boxplot of NO before data preprocessing")
summary(NO_clone)
# Replace negative values with NA
NO_clone <- NO_clone %>% mutate_all(funs(replace(., .<0, NA)))
summary(NO_clone)
## Date is showing 2 NA values. So we need to handle this situation
# NO_clone <- na.omit(NO_clone)
which(is.na(NO_clone$Date))
# NO_clone <- NO_clone[-c(2138, 10874), ]
NO_clone[2138,]
NO_clone[10874,]
NO_clone[2138,]$Date <- as.POSIXct("2019-03-31 01:00:00")
NO_clone[10874,]$Date <- as.POSIXct("2020-03-29 01:00:00")
summary(NO_clone)
# Missing data of NO before LOCF(Last Observation Carried Forward)
missing_data_NO_clone <- data.frame("Station"=colnames(NO_clone[,-1]), "value"=colSums(is.na(NO_clone[,-1])))
md_plot_NO_clone<-ggplot(data=missing_data_NO_clone, aes(x=Station, y=value)) +
geom_bar(stat="identity", fill="steelblue")
md_plot_NO_clone +
# geom_text(aes(label=value), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=value), vjust=-0.3, size=3.5)+
theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1))+
ggtitle("Missing data of NO before LOCF(Last Observation Carried Forward)")
# Last obs. carried forward
NO_clone <- na.locf(NO_clone, na.rm = F)
# Check NA values
missing_data_NO_clone <- data.frame("Station"=colnames(NO_clone[,-1]), "value"=colSums(is.na(NO_clone[,-1])))
md_plot_NO_clone<-ggplot(data=missing_data_NO_clone, aes(x=Station, y=value)) +
geom_bar(stat="identity", fill="steelblue")
md_plot_NO_clone +
# geom_text(aes(label=value), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=value), vjust=-0.3, size=3.5)+
theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1))+
ggtitle("Missing data of NO after LOCF(Last Observation Carried Forward)")
# Replace NA's with median
for(i in 2:ncol(NO_clone)){
NO_clone[is.na(NO_clone[,i]), i] <- format(round(median(NO_clone[,i], na.rm = TRUE), 2), nsmall = 2)
NO_clone[,i] <- as.double(NO_clone[,i])
}
summary(NO_clone)
# Plot the graphs again
NO_clone[,-1] %>% gather() %>% head()
ggplot(gather(NO_clone[,-1]), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
ggtitle("Histogram of NO after data preprocessing")
NO_clone[,c(-1)] %>% gather() %>% head()
ggplot(gather(NO_clone[,c(-1)]), aes(value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
ggtitle("Boxplot of NO after data preprocessing")
summary(NO_clone)
boxplot(NO_clone[,c(-1)],las=2, main="Boxplot of NO after data preprocessing")
View(O3_combined)
summary(O3_combined$value)
summary(O3_clone)
O3_clone <- O3
str(O3_clone)
summary(O3_clone)
O3_clone[,-1] %>% gather() %>% head()
ggplot(gather(O3_clone[,-1]), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')+
ggtitle("Histogram of O3 before data preprocessing")
O3_clone[,c(-1)] %>% gather() %>% head()
ggplot(gather(O3_clone[,c(-1)]), aes(value)) +
geom_boxplot(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
stat_boxplot(geom ='errorbar') +
ggtitle("Boxplot of O3 before data preprocessing")
summary(O3_clone)
# Replace negative values with NA
O3_clone <- O3_clone %>% mutate_all(funs(replace(., .<0, NA)))
summary(O3_clone)
## Date is showing 2 NA values. So we need to handle this situation
# O3_clone <- na.omit(O3_clone)
which(is.na(O3_clone$Date))
# O3_clone <- O3_clone[-c(2138, 10874), ]
O3_clone[2138,]
O3_clone[10874,]
O3_clone[2138,]$Date <- as.POSIXct("2019-03-31 01:00:00")
O3_clone[10874,]$Date <- as.POSIXct("2020-03-29 01:00:00")
summary(O3_clone)
# Missing data of O3 before LOCF(Last Observation Carried Forward)
missing_data_O3_clone <- data.frame("Station"=colnames(O3_clone[,-1]), "value"=colSums(is.na(O3_clone[,-1])))
md_plot_O3_clone<-ggplot(data=missing_data_O3_clone, aes(x=Station, y=value)) +
geom_bar(stat="identity", fill="steelblue")
md_plot_O3_clone +
# geom_text(aes(label=value), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=value), vjust=-0.3, size=3.5)+
theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1))+
ggtitle("Missing data of O3 before LOCF(Last Observation Carried Forward)")
# Last obs. carried forward
O3_clone <- na.locf(O3_clone, na.rm = F)
# Check NA values
missing_data_O3_clone <- data.frame("Station"=colnames(O3_clone[,-1]), "value"=colSums(is.na(O3_clone[,-1])))
md_plot_O3_clone<-ggplot(data=missing_data_O3_clone, aes(x=Station, y=value)) +
geom_bar(stat="identity", fill="steelblue")
md_plot_O3_clone +
# geom_text(aes(label=value), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=value), vjust=-0.3, size=3.5)+
theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1))+
ggtitle("Missing data of O3 after LOCF(Last Observation Carried Forward)")
summary(O3_clone)
# Plot the graphs again
O3_clone[,-1] %>% gather() %>% head()
ggplot(gather(O3_clone[,-1]), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
ggtitle("Histogram of O3 after data preprocessing")
O3_clone[,c(-1)] %>% gather() %>% head()
ggplot(gather(O3_clone[,c(-1)]), aes(value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
ggtitle("Boxplot of O3 after data preprocessing")
summary(O3_clone)
summary(O3_combined)
summary(O3_clone)
PM2_5_clone <- PM2_5
str(PM2_5_clone)
summary(PM2_5_clone)
summary(PM2_5_combined$value)
PM10_clone <- PM10
str(PM10_clone)
summary(PM10_clone)
R --version
R.version
